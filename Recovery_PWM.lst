;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 07/06/2014 00:37:09
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFBE  	GOTO        380
_interrupt:
;Recovery_PWM.c,214 :: 		void interrupt()                     // Interrupt service routine
0x0008	0xF018C000  	MOVFF       R0, 24
0x000C	0xF017C001  	MOVFF       R1, 23
0x0010	0xF016C00C  	MOVFF       R12, 22
0x0014	0xF015C00D  	MOVFF       R13, 21
;Recovery_PWM.c,216 :: 		if(INTCON.RBIF && INTCON.RBIE)    //se è scattato l'interrupt on change e gli interrupt on change sono abilitati
0x0018	0xA0F2      	BTFSS       INTCON, 0 
0x001A	0xD05B      	BRA         L_interrupt2
0x001C	0xA6F2      	BTFSS       INTCON, 3 
0x001E	0xD059      	BRA         L_interrupt2
L__interrupt37:
;Recovery_PWM.c,218 :: 		if(YODA_ATTIVA_VALVOLE)      // STM1 - Apri Valvole
0x0020	0xA481      	BTFSS       RB2_bit, BitPos(RB2_bit+0) 
0x0022	0xD02A      	BRA         L_interrupt3
;Recovery_PWM.c,221 :: 		while(YODA_ATTIVA_VALVOLE && debouncer_valvole <= DEBOUNCER_TIME) //fino a che il segnale è attivo e non è ancora passato il tempo di debounce, giro qui
L_interrupt4:
0x0024	0xA481      	BTFSS       RB2_bit, BitPos(RB2_bit+0) 
0x0026	0xD01D      	BRA         L_interrupt5
0x0028	0x0E00      	MOVLW       0
0x002A	0x6E00      	MOVWF       R0 
0x002C	0x501A      	MOVF        _debouncer_valvole+1, 0 
0x002E	0x5C00      	SUBWF       R0, 0 
0x0030	0xE102      	BNZ         L__interrupt46
0x0032	0x5019      	MOVF        _debouncer_valvole, 0 
0x0034	0x0864      	SUBLW       100
L__interrupt46:
0x0036	0xE315      	BNC         L_interrupt5
L__interrupt36:
;Recovery_PWM.c,223 :: 		debouncer_valvole++;
0x0038	0x0E01      	MOVLW       1
0x003A	0x2419      	ADDWF       _debouncer_valvole, 0 
0x003C	0x6E00      	MOVWF       R0 
0x003E	0x0E00      	MOVLW       0
0x0040	0x201A      	ADDWFC      _debouncer_valvole+1, 0 
0x0042	0x6E01      	MOVWF       R1 
0x0044	0xF019C000  	MOVFF       R0, _debouncer_valvole
0x0048	0xF01AC001  	MOVFF       R1, _debouncer_valvole+1
;Recovery_PWM.c,224 :: 		Delay_ms(1);
0x004C	0x0E03      	MOVLW       3
0x004E	0x6E0C      	MOVWF       R12, 0
0x0050	0x0E97      	MOVLW       151
0x0052	0x6E0D      	MOVWF       R13, 0
L_interrupt8:
0x0054	0x2E0D      	DECFSZ      R13, 1, 0
0x0056	0xD7FE      	BRA         L_interrupt8
0x0058	0x2E0C      	DECFSZ      R12, 1, 0
0x005A	0xD7FC      	BRA         L_interrupt8
0x005C	0x0000      	NOP
0x005E	0x0000      	NOP
;Recovery_PWM.c,225 :: 		}
0x0060	0xD7E1      	BRA         L_interrupt4
L_interrupt5:
;Recovery_PWM.c,226 :: 		if(debouncer_valvole >= DEBOUNCER_TIME) //se sono uscito dal ciclo di debounce per via della scadenza del timer, allora attivo la porta, altrimenti ignoro il comando
0x0062	0x0E00      	MOVLW       0
0x0064	0x5C1A      	SUBWF       _debouncer_valvole+1, 0 
0x0066	0xE102      	BNZ         L__interrupt47
0x0068	0x0E64      	MOVLW       100
0x006A	0x5C19      	SUBWF       _debouncer_valvole, 0 
L__interrupt47:
0x006C	0xE303      	BNC         L_interrupt9
;Recovery_PWM.c,228 :: 		flag_attiva_valvole=ON;
0x006E	0x0E01      	MOVLW       1
0x0070	0x6E21      	MOVWF       _flag_attiva_valvole 
;Recovery_PWM.c,239 :: 		}
0x0072	0xD002      	BRA         L_interrupt10
L_interrupt9:
;Recovery_PWM.c,241 :: 		debouncer_valvole = 0;   //altrimenti lo resetto, per evitare che disturbi ripetuti mi diventino un segnale accettato
0x0074	0x6A19      	CLRF        _debouncer_valvole 
0x0076	0x6A1A      	CLRF        _debouncer_valvole+1 
L_interrupt10:
;Recovery_PWM.c,242 :: 		}
L_interrupt3:
;Recovery_PWM.c,243 :: 		if(YODA_SGANCIA_ANELLO)      // STM2 - Sgancia Anello
0x0078	0xA681      	BTFSS       RB3_bit, BitPos(RB3_bit+0) 
0x007A	0xD02A      	BRA         L_interrupt11
;Recovery_PWM.c,245 :: 		while(YODA_SGANCIA_ANELLO && debouncer_anello <= DEBOUNCER_TIME) //fino a che il segnale è attivo e non è ancora passato il tempo di debounce, giro qui
L_interrupt12:
0x007C	0xA681      	BTFSS       RB3_bit, BitPos(RB3_bit+0) 
0x007E	0xD01D      	BRA         L_interrupt13
0x0080	0x0E00      	MOVLW       0
0x0082	0x6E00      	MOVWF       R0 
0x0084	0x501C      	MOVF        _debouncer_anello+1, 0 
0x0086	0x5C00      	SUBWF       R0, 0 
0x0088	0xE102      	BNZ         L__interrupt48
0x008A	0x501B      	MOVF        _debouncer_anello, 0 
0x008C	0x0864      	SUBLW       100
L__interrupt48:
0x008E	0xE315      	BNC         L_interrupt13
L__interrupt35:
;Recovery_PWM.c,247 :: 		debouncer_anello++;
0x0090	0x0E01      	MOVLW       1
0x0092	0x241B      	ADDWF       _debouncer_anello, 0 
0x0094	0x6E00      	MOVWF       R0 
0x0096	0x0E00      	MOVLW       0
0x0098	0x201C      	ADDWFC      _debouncer_anello+1, 0 
0x009A	0x6E01      	MOVWF       R1 
0x009C	0xF01BC000  	MOVFF       R0, _debouncer_anello
0x00A0	0xF01CC001  	MOVFF       R1, _debouncer_anello+1
;Recovery_PWM.c,248 :: 		Delay_ms(1);
0x00A4	0x0E03      	MOVLW       3
0x00A6	0x6E0C      	MOVWF       R12, 0
0x00A8	0x0E97      	MOVLW       151
0x00AA	0x6E0D      	MOVWF       R13, 0
L_interrupt16:
0x00AC	0x2E0D      	DECFSZ      R13, 1, 0
0x00AE	0xD7FE      	BRA         L_interrupt16
0x00B0	0x2E0C      	DECFSZ      R12, 1, 0
0x00B2	0xD7FC      	BRA         L_interrupt16
0x00B4	0x0000      	NOP
0x00B6	0x0000      	NOP
;Recovery_PWM.c,249 :: 		}
0x00B8	0xD7E1      	BRA         L_interrupt12
L_interrupt13:
;Recovery_PWM.c,250 :: 		if(debouncer_anello >= DEBOUNCER_TIME) //se sono uscito dal ciclo di debounce per via della scadenza del timer, allora attivo la porta, altrimenti ignoro il comando
0x00BA	0x0E00      	MOVLW       0
0x00BC	0x5C1C      	SUBWF       _debouncer_anello+1, 0 
0x00BE	0xE102      	BNZ         L__interrupt49
0x00C0	0x0E64      	MOVLW       100
0x00C2	0x5C1B      	SUBWF       _debouncer_anello, 0 
L__interrupt49:
0x00C4	0xE303      	BNC         L_interrupt17
;Recovery_PWM.c,252 :: 		flag_sgancia_anello = 1;
0x00C6	0x0E01      	MOVLW       1
0x00C8	0x6E20      	MOVWF       _flag_sgancia_anello 
;Recovery_PWM.c,253 :: 		}
0x00CA	0xD002      	BRA         L_interrupt18
L_interrupt17:
;Recovery_PWM.c,255 :: 		debouncer_anello = 0;
0x00CC	0x6A1B      	CLRF        _debouncer_anello 
0x00CE	0x6A1C      	CLRF        _debouncer_anello+1 
L_interrupt18:
;Recovery_PWM.c,256 :: 		}
L_interrupt11:
;Recovery_PWM.c,257 :: 		INTCON.RBIF = 0;
0x00D0	0x90F2      	BCF         INTCON, 0 
;Recovery_PWM.c,258 :: 		}
L_interrupt2:
;Recovery_PWM.c,259 :: 		if(INTCON.INT0IF)
0x00D2	0xA2F2      	BTFSS       INTCON, 1 
0x00D4	0xD005      	BRA         L_interrupt19
;Recovery_PWM.c,261 :: 		if(RESET)      // Reset
0x00D6	0xA080      	BTFSS       RA0_bit, BitPos(RA0_bit+0) 
0x00D8	0xD002      	BRA         L_interrupt20
;Recovery_PWM.c,263 :: 		flag_reset = 1;
0x00DA	0x0E01      	MOVLW       1
0x00DC	0x6E1E      	MOVWF       _flag_reset 
;Recovery_PWM.c,264 :: 		}
L_interrupt20:
;Recovery_PWM.c,265 :: 		INTCON.INT0IF = 0;
0x00DE	0x92F2      	BCF         INTCON, 1 
;Recovery_PWM.c,266 :: 		}
L_interrupt19:
;Recovery_PWM.c,267 :: 		}
L_end_interrupt:
L__interrupt45:
0x00E0	0xF000C018  	MOVFF       24, R0
0x00E4	0xF001C017  	MOVFF       23, R1
0x00E8	0xF00CC016  	MOVFF       22, R12
0x00EC	0xF00DC015  	MOVFF       21, R13
0x00F0	0x0011      	RETFIE      1
; end of _interrupt
_setServo:
;Recovery_PWM.c,117 :: 		void setServo(U_INT servo_sx, U_INT servo_dx)
;Recovery_PWM.c,119 :: 		PDC0L = servo_sx&255;            //imposto i primi 8bit (bassi) del registro del servo di sinistra
0x00F2	0x0EFF      	MOVLW       255
0x00F4	0x1422      	ANDWF       FARG_setServo_servo_sx, 0 
0x00F6	0x6E91      	MOVWF       PDC0L 
;Recovery_PWM.c,120 :: 		PDC0H = servo_sx>>8;             //imposto i bit alti del registro del servo di sinistra
0x00F8	0xF000C023  	MOVFF       FARG_setServo_servo_sx+1, R0
0x00FC	0x6A01      	CLRF        R1 
0x00FE	0xFF90C000  	MOVFF       R0, PDC0H
;Recovery_PWM.c,121 :: 		PDC2L = servo_dx&255;            //imposto i bit bassi del servo di destra
0x0102	0x0EFF      	MOVLW       255
0x0104	0x1424      	ANDWF       FARG_setServo_servo_dx, 0 
0x0106	0x6E8D      	MOVWF       PDC2L 
;Recovery_PWM.c,122 :: 		PDC2H = servo_dx>>8;             //imposto i bit alti del servo di destra
0x0108	0xF000C025  	MOVFF       FARG_setServo_servo_dx+1, R0
0x010C	0x6A01      	CLRF        R1 
0x010E	0xFF8CC000  	MOVFF       R0, PDC2H
;Recovery_PWM.c,123 :: 		}
L_end_setServo:
0x0112	0x0012      	RETURN      0
; end of _setServo
_initServo:
;Recovery_PWM.c,126 :: 		void initServo()
;Recovery_PWM.c,128 :: 		setServo(SERVO_SX_INIT,SERVO_DX_INIT);    //imposto i valori iniziali
0x0114	0x0ED5      	MOVLW       213
0x0116	0x6E22      	MOVWF       FARG_setServo_servo_sx 
0x0118	0x0E02      	MOVLW       2
0x011A	0x6E23      	MOVWF       FARG_setServo_servo_sx+1 
0x011C	0x0EC0      	MOVLW       192
0x011E	0x6E24      	MOVWF       FARG_setServo_servo_dx 
0x0120	0x0E03      	MOVLW       3
0x0122	0x6E25      	MOVWF       FARG_setServo_servo_dx+1 
0x0124	0xDFE6      	RCALL       _setServo
;Recovery_PWM.c,129 :: 		}
L_end_initServo:
0x0126	0x0012      	RETURN      0
; end of _initServo
_init:
;Recovery_PWM.c,133 :: 		void init()                          // Device intialization
;Recovery_PWM.c,135 :: 		OSCCON = 0XFF;
0x0128	0x0EFF      	MOVLW       255
0x012A	0x6ED3      	MOVWF       OSCCON 
;Recovery_PWM.c,137 :: 		TRISA = 0b00101101;      // RA6, RA7 output
0x012C	0x0E2D      	MOVLW       45
0x012E	0x6E92      	MOVWF       TRISA 
;Recovery_PWM.c,138 :: 		LATA = 0X00;             // Clear PORT A
0x0130	0x6A89      	CLRF        LATA 
;Recovery_PWM.c,139 :: 		TRISB = 0b00001100;      // RB2, RB3 input
0x0132	0x0E0C      	MOVLW       12
0x0134	0x6E93      	MOVWF       TRISB 
;Recovery_PWM.c,140 :: 		LATB = 0X00;             // Clear PORT B
0x0136	0x6A8A      	CLRF        LATB 
;Recovery_PWM.c,142 :: 		RCON.IPEN = 0;           // No priority
0x0138	0x9ED0      	BCF         RCON, 7 
;Recovery_PWM.c,143 :: 		INTCON.PEIE = 1;         // Abilito interrupt sulle periferiche
0x013A	0x8CF2      	BSF         INTCON, 6 
;Recovery_PWM.c,144 :: 		INTCON.GIE = 1;          // Enable GLOBAL interrupts
0x013C	0x8EF2      	BSF         INTCON, 7 
;Recovery_PWM.c,145 :: 		INTCON.RBIE = 1;         // Enable Port B Interrupt-On-Change
0x013E	0x86F2      	BSF         INTCON, 3 
;Recovery_PWM.c,146 :: 		INTCON.RBIF = 0;         // Clear PORT B interrupt flag
0x0140	0x90F2      	BCF         INTCON, 0 
;Recovery_PWM.c,147 :: 		INTCON.INT0IE = 1;       // Enable PORTA interrupt
0x0142	0x88F2      	BSF         INTCON, 4 
;Recovery_PWM.c,148 :: 		INTCON.INT0IF = 0;       // Clear PORTA interrupt flag
0x0144	0x92F2      	BCF         INTCON, 1 
;Recovery_PWM.c,149 :: 		INTCON2.INTEDG0 = 1;     // PORTA interrupt on rising edge
0x0146	0x8CF1      	BSF         INTCON2, 6 
;Recovery_PWM.c,150 :: 		ADCON1 = 0XFF;           // PORTA Digital I/O
0x0148	0x0EFF      	MOVLW       255
0x014A	0x6EC1      	MOVWF       ADCON1 
;Recovery_PWM.c,152 :: 		PTCON0 = 0b00001000;
0x014C	0x0E08      	MOVLW       8
0x014E	0x6E9A      	MOVWF       PTCON0 
;Recovery_PWM.c,153 :: 		PTCON1 = 0b10000000;
0x0150	0x0E80      	MOVLW       128
0x0152	0x6E99      	MOVWF       PTCON1 
;Recovery_PWM.c,154 :: 		PWMCON0 = 0b01000111;
0x0154	0x0E47      	MOVLW       71
0x0156	0x6E86      	MOVWF       PWMCON0 
;Recovery_PWM.c,155 :: 		PWMCON1 = 0X00;
0x0158	0x6A85      	CLRF        PWMCON1 
;Recovery_PWM.c,156 :: 		PTPERH = FREQ_PWM>>8;
0x015A	0x0E09      	MOVLW       9
0x015C	0x6E95      	MOVWF       PTPERH 
;Recovery_PWM.c,157 :: 		PTPERL = FREQ_PWM&255;
0x015E	0x0EC3      	MOVLW       195
0x0160	0x6E96      	MOVWF       PTPERL 
;Recovery_PWM.c,158 :: 		PTMRL = 0XFF;
0x0162	0x0EFF      	MOVLW       255
0x0164	0x6E98      	MOVWF       PTMRL 
;Recovery_PWM.c,159 :: 		PTMRH = 0X00;
0x0166	0x6A97      	CLRF        PTMRH 
;Recovery_PWM.c,160 :: 		initServo();
0x0168	0xDFD5      	RCALL       _initServo
;Recovery_PWM.c,169 :: 		}
L_end_init:
0x016A	0x0012      	RETURN      0
; end of _init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x016C	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x016E	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0172	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0174	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0176	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0178	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x017A	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x017C	0x6A19      	CLRF        _debouncer_valvole 
0x017E	0x6A1A      	CLRF        26 
0x0180	0x6A1B      	CLRF        _debouncer_anello 
0x0182	0x6A1C      	CLRF        28 
0x0184	0x6A1D      	CLRF        _flag 
0x0186	0x6A1E      	CLRF        _flag_reset 
0x0188	0x6A1F      	CLRF        _disable_reinit 
0x018A	0x6A20      	CLRF        _flag_sgancia_anello 
0x018C	0x6A21      	CLRF        _flag_attiva_valvole 
;Recovery_PWM.c,273 :: 		void main()                          // Main routine
;Recovery_PWM.c,275 :: 		init();  //inizializzo
0x018E	0xDFCC      	RCALL       _init
;Recovery_PWM.c,276 :: 		while(1)                 // Infinite loop
L_main21:
;Recovery_PWM.c,293 :: 		if(flag_attiva_valvole && !ACK_VALVOLE)
0x0190	0x5221      	MOVF        _flag_attiva_valvole, 1 
0x0192	0xE00C      	BZ          L_main25
0x0194	0xBC80      	BTFSC       RA6_bit, BitPos(RA6_bit+0) 
0x0196	0xD00A      	BRA         L_main25
L__main40:
;Recovery_PWM.c,295 :: 		ACK_VALVOLE = 1;
0x0198	0x8C80      	BSF         RA6_bit, BitPos(RA6_bit+0) 
;Recovery_PWM.c,296 :: 		setServo(SERVO_SX_END,SERVO_DX_END); //porto i servo nella posizione finale.
0x019A	0x0EA2      	MOVLW       162
0x019C	0x6E22      	MOVWF       FARG_setServo_servo_sx 
0x019E	0x0E03      	MOVLW       3
0x01A0	0x6E23      	MOVWF       FARG_setServo_servo_sx+1 
0x01A2	0x0E16      	MOVLW       22
0x01A4	0x6E24      	MOVWF       FARG_setServo_servo_dx 
0x01A6	0x0E03      	MOVLW       3
0x01A8	0x6E25      	MOVWF       FARG_setServo_servo_dx+1 
0x01AA	0xDFA3      	RCALL       _setServo
;Recovery_PWM.c,297 :: 		}
L_main25:
;Recovery_PWM.c,298 :: 		if(flag_sgancia_anello && !ACK_ANELLO)
0x01AC	0x5220      	MOVF        _flag_sgancia_anello, 1 
0x01AE	0xE013      	BZ          L_main28
0x01B0	0xBE80      	BTFSC       RA7_bit, BitPos(RA7_bit+0) 
0x01B2	0xD011      	BRA         L_main28
L__main39:
;Recovery_PWM.c,300 :: 		ACK_ANELLO = 1; //avviso la yoda che lo sgancio è stato effettuato
0x01B4	0x8E80      	BSF         RA7_bit, BitPos(RA7_bit+0) 
;Recovery_PWM.c,301 :: 		SGANCIO_ANELLO = 1; //attivo il ponte H
0x01B6	0x8880      	BSF         RA4_bit, BitPos(RA4_bit+0) 
;Recovery_PWM.c,302 :: 		Delay_ms(2000);    //aspetto due secondi (il motorino gira)
0x01B8	0x0E15      	MOVLW       21
0x01BA	0x6E0B      	MOVWF       R11, 0
0x01BC	0x0E4B      	MOVLW       75
0x01BE	0x6E0C      	MOVWF       R12, 0
0x01C0	0x0EBE      	MOVLW       190
0x01C2	0x6E0D      	MOVWF       R13, 0
L_main29:
0x01C4	0x2E0D      	DECFSZ      R13, 1, 0
0x01C6	0xD7FE      	BRA         L_main29
0x01C8	0x2E0C      	DECFSZ      R12, 1, 0
0x01CA	0xD7FC      	BRA         L_main29
0x01CC	0x2E0B      	DECFSZ      R11, 1, 0
0x01CE	0xD7FA      	BRA         L_main29
0x01D0	0x0000      	NOP
;Recovery_PWM.c,303 :: 		SGANCIO_ANELLO = 0; //disattivo il ponte H
0x01D2	0x9880      	BCF         RA4_bit, BitPos(RA4_bit+0) 
;Recovery_PWM.c,304 :: 		flag = 0;
0x01D4	0x6A1D      	CLRF        _flag 
;Recovery_PWM.c,305 :: 		}
L_main28:
;Recovery_PWM.c,306 :: 		if(flag_reset)
0x01D6	0x521E      	MOVF        _flag_reset, 1 
0x01D8	0xE00D      	BZ          L_main30
;Recovery_PWM.c,308 :: 		debouncer_valvole = 0;
0x01DA	0x6A19      	CLRF        _debouncer_valvole 
0x01DC	0x6A1A      	CLRF        _debouncer_valvole+1 
;Recovery_PWM.c,309 :: 		debouncer_anello = 0;
0x01DE	0x6A1B      	CLRF        _debouncer_anello 
0x01E0	0x6A1C      	CLRF        _debouncer_anello+1 
;Recovery_PWM.c,310 :: 		SGANCIO_ANELLO = 0;
0x01E2	0x9880      	BCF         RA4_bit, BitPos(RA4_bit+0) 
;Recovery_PWM.c,311 :: 		initServo();
0x01E4	0xDF97      	RCALL       _initServo
;Recovery_PWM.c,312 :: 		ACK_ANELLO = 0;
0x01E6	0x9E80      	BCF         RA7_bit, BitPos(RA7_bit+0) 
;Recovery_PWM.c,313 :: 		ACK_VALVOLE = 0;
0x01E8	0x9C80      	BCF         RA6_bit, BitPos(RA6_bit+0) 
;Recovery_PWM.c,314 :: 		flag = 0;
0x01EA	0x6A1D      	CLRF        _flag 
;Recovery_PWM.c,315 :: 		flag_attiva_valvole = 0;
0x01EC	0x6A21      	CLRF        _flag_attiva_valvole 
;Recovery_PWM.c,316 :: 		flag_sgancia_anello = 0;
0x01EE	0x6A20      	CLRF        _flag_sgancia_anello 
;Recovery_PWM.c,317 :: 		flag_reset = 0;
0x01F0	0x6A1E      	CLRF        _flag_reset 
;Recovery_PWM.c,318 :: 		disable_reinit = OFF;
0x01F2	0x6A1F      	CLRF        _disable_reinit 
;Recovery_PWM.c,319 :: 		}
L_main30:
;Recovery_PWM.c,321 :: 		if(ACK_VALVOLE && ACK_ANELLO && !disable_reinit)
0x01F4	0xAC80      	BTFSS       RA6_bit, BitPos(RA6_bit+0) 
0x01F6	0xD021      	BRA         L_main33
0x01F8	0xAE80      	BTFSS       RA7_bit, BitPos(RA7_bit+0) 
0x01FA	0xD01F      	BRA         L_main33
0x01FC	0x521F      	MOVF        _disable_reinit, 1 
0x01FE	0xE11D      	BNZ         L_main33
L__main38:
;Recovery_PWM.c,323 :: 		delay_ms(RESTORE_TIMER);     //attendo RESTORE_TIMER secondi
0x0200	0x0E02      	MOVLW       2
0x0202	0x6E0A      	MOVWF       R10, 0
0x0204	0x0E96      	MOVLW       150
0x0206	0x6E0B      	MOVWF       R11, 0
0x0208	0x0ED8      	MOVLW       216
0x020A	0x6E0C      	MOVWF       R12, 0
0x020C	0x0E08      	MOVLW       8
0x020E	0x6E0D      	MOVWF       R13, 0
L_main34:
0x0210	0x2E0D      	DECFSZ      R13, 1, 0
0x0212	0xD7FE      	BRA         L_main34
0x0214	0x2E0C      	DECFSZ      R12, 1, 0
0x0216	0xD7FC      	BRA         L_main34
0x0218	0x2E0B      	DECFSZ      R11, 1, 0
0x021A	0xD7FA      	BRA         L_main34
0x021C	0x2E0A      	DECFSZ      R10, 1, 0
0x021E	0xD7F8      	BRA         L_main34
0x0220	0x0000      	NOP
;Recovery_PWM.c,325 :: 		setServo(SERVO_SX_AUTO_SET,SERVO_DX_AUTO_SET);  //se si usa questo, dopo RESTORE_TIMER secondi i servo si spostano a metà strada tra la posizione di ricaric e la posizione di espulsione.
0x0222	0x0E3B      	MOVLW       59
0x0224	0x6E22      	MOVWF       FARG_setServo_servo_sx 
0x0226	0x0E03      	MOVLW       3
0x0228	0x6E23      	MOVWF       FARG_setServo_servo_sx+1 
0x022A	0x0E6B      	MOVLW       107
0x022C	0x6E24      	MOVWF       FARG_setServo_servo_dx 
0x022E	0x0E03      	MOVLW       3
0x0230	0x6E25      	MOVWF       FARG_setServo_servo_dx+1 
0x0232	0xDF5F      	RCALL       _setServo
;Recovery_PWM.c,326 :: 		SGANCIO_ANELLO = OFF;
0x0234	0x9880      	BCF         RA4_bit, BitPos(RA4_bit+0) 
;Recovery_PWM.c,327 :: 		disable_reinit = ON;
0x0236	0x0E01      	MOVLW       1
0x0238	0x6E1F      	MOVWF       _disable_reinit 
;Recovery_PWM.c,330 :: 		}
L_main33:
;Recovery_PWM.c,332 :: 		}
0x023A	0xD7AA      	BRA         L_main21
;Recovery_PWM.c,333 :: 		}
L_end_main:
0x023C	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [234]    _interrupt
0x00F2      [34]    _setServo
0x0114      [20]    _initServo
0x0128      [68]    _init
0x016C      [16]    ___CC2DW
0x017C     [194]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    FLASH_Write_8_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    R1
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    R2
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    FLASH_Write_8_SaveINTCON_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memchr_s_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    R3
0x0003       [1]    MM_Init_i_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strncat_cp_L0
0x0004       [1]    R4
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strcpy_cp_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    R5
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019       [2]    _debouncer_valvole
0x001B       [2]    _debouncer_anello
0x001D       [1]    _flag
0x001E       [1]    _flag_reset
0x001F       [1]    _disable_reinit
0x0020       [1]    _flag_sgancia_anello
0x0021       [1]    _flag_attiva_valvole
0x0022       [2]    FARG_setServo_servo_sx
0x0024       [2]    FARG_setServo_servo_dx
0x0F80       [0]    RA0_bit
0x0F80       [0]    RA6_bit
0x0F80       [0]    RA7_bit
0x0F80       [0]    RA4_bit
0x0F81       [0]    RB2_bit
0x0F81       [0]    RB3_bit
0x0F85       [1]    PWMCON1
0x0F86       [1]    PWMCON0
0x0F89       [1]    LATA
0x0F8A       [1]    LATB
0x0F8C       [1]    PDC2H
0x0F8D       [1]    PDC2L
0x0F90       [1]    PDC0H
0x0F91       [1]    PDC0L
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F95       [1]    PTPERH
0x0F96       [1]    PTPERL
0x0F97       [1]    PTMRH
0x0F98       [1]    PTMRL
0x0F99       [1]    PTCON1
0x0F9A       [1]    PTCON0
0x0FC1       [1]    ADCON1
0x0FD0       [1]    RCON
0x0FD3       [1]    OSCCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Label List: ** 
//----------------------------------------------
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_interrupt17
  L_interrupt18
  L_interrupt19
  L_interrupt20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L__interrupt35
  L__interrupt36
  L__interrupt37
  L__main38
  L__main39
  L__main40
  L_end_setServo
  _setServo
  L_end_initServo
  _initServo
  L_end_init
  _init
  L_end_interrupt
  _interrupt
  L__interrupt45
  L__interrupt46
  L__interrupt47
  L__interrupt48
  L__interrupt49
  L_end_main
  _main
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_interrupt17
  L_interrupt18
  L_interrupt19
  L_interrupt20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L__interrupt35
  L__interrupt36
  L__interrupt37
  L__main38
  L__main39
  L__main40
  L_end_setServo
  _setServo
  L_end_initServo
  _initServo
  L_end_init
  _init
  L_end_interrupt
  _interrupt
  L__interrupt45
  L__interrupt46
  L__interrupt47
  L__interrupt48
  L__interrupt49
  L_end_main
  _main
